AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create an EC2 instance, CodeDeploy application, and deployment group.

Parameters:
  RDSPASSWORD:
    Type: String
    NoEcho: true


Resources:
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: discord-bot-leagues

  EC2InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'EC2InstancePolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                  - 'codedeploy:*'
                  - 'logs:*'
                  - 'ssm:*'
                  - 'mq:*'
                  - 'rds:*'
                Resource: '*'

  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  CodeDeployServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'CodeDeployPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                  - "codedeploy:*"
                  - 'ec2:Describe*'
                  - 'ec2:StopInstances'
                  - 'ec2:TerminateInstances'
                  - 'ec2:UpdateInstance'
                  - 'tag:GetTags'
                  - 'tag:TagResources'
                  - 'autoscaling:CompleteLifecycleAction'
                  - 'autoscaling:DeleteLifecycleHook'
                  - 'autoscaling:PutLifecycleHook'
                  - 'autoscaling:RecordLifecycleActionHeartbeat'
                Resource: '*'

  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: 'ami-08a0d1e16fc3f61ea' # Update this to the desired AMI ID
      InstanceType: 't2.micro'
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: 'nardos-key-pair' # Update this to your key pair
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "export POSTGRES_PASSWORD=${RDSPASSWORD}" >> /etc/profile.d/myenvvars.sh
          source /etc/profile.d/myenvvars.sh
          sudo yum update -y
          sudo yum install ruby wget -y
          cd /home/ec2-user
          wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install
          chmod +x ./install
          sudo ./install auto
          sudo service codedeploy-agent status
          sudo yum install docker -y
          sudo service docker start
          sudo systemctl enable docker
          docker --version

      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: 'CodeDeployDemoInstance'
        - Key: Environment
          Value: 'Production'

  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable SSH and HTTP access'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  CodeDeployApplication:
    Type: 'AWS::CodeDeploy::Application'
    Properties:
      ApplicationName: 'Discord-League-Bot-Application'
      ComputePlatform: 'Server'


  CodeDeployDeploymentGroup:
    Type: 'AWS::CodeDeploy::DeploymentGroup'
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: 'Discord-League-Bot-EC2-Deployment-Group'
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentConfigName: 'CodeDeployDefault.OneAtATime'
      Ec2TagFilters:
        - Key: 'Environment'
          Value: 'Production'
          Type: 'KEY_AND_VALUE'
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE
          - DEPLOYMENT_STOP_ON_ALARM
          - DEPLOYMENT_STOP_ON_REQUEST

Outputs:
  EC2InstanceID:
    Description: 'ID of the EC2 instance'
    Value: !Ref EC2Instance

  CodeDeployApplicationName:
    Description: 'Name of the CodeDeploy Application'
    Value: !Ref CodeDeployApplication

  CodeDeployDeploymentGroupName:
    Description: 'Name of the CodeDeploy Deployment Group'
    Value: !Ref CodeDeployDeploymentGroup
