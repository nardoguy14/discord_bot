name: Deploy to AWS

run-name: ${{ github.actor }} is testing out GitHub Actions ðŸš€

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  Build-Docker-Containers:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker buildx build --load -t twitch_leagues_bot:latest .
          docker tag twitch_leagues_bot:latest nardoarevalo14/twitch_leagues_bot:latest
          echo "Docker twitch bot image built."

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          echo "Pushing Docker image..."
          docker push nardoarevalo14/twitch_leagues_bot:latest

  Build-Rds-And-RabbitMq-Infrastructure:
    needs: [Build-Docker-Containers]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create or Update Cloudformation
        run: |
          STACK_NAME="Discord-League-Bot-Stack"
          TEMPLATE_FILE="deployment/infra_db_rabbitmq_cloudformation.yml"
          CAPABILITIES="CAPABILITY_IAM"

          aws cloudformation list-stacks > stacks.json
          cat stacks.json
          STACK_EXISTS=$(python scripts/parse_stacks.py "rds-rabbitmq-infra")

          if [[ "$STACK_EXISTS" == "nostack" ]]; then
            echo "Stack does not exist. Creating stack..."
            aws cloudformation create-stack --stack-name rds-rabbitmq-infra --template-body file://$TEMPLATE_FILE --parameters ParameterKey=RDSPASSWORD,ParameterValue="${{ secrets.RDS_PASSWORD }}" --capabilities $CAPABILITIES
            aws cloudformation wait stack-create-complete --stack-name rds-rabbitmq-infra
          else
            echo "Stack exists. Updating stack..."
            aws cloudformation update-stack --stack-name rds-rabbitmq-infra --template-body file://$TEMPLATE_FILE --parameters ParameterKey=RDSPASSWORD,ParameterValue="${{ secrets.RDS_PASSWORD }}" --capabilities $CAPABILITIES 2>&1 && \
            aws cloudformation wait stack-update-complete --stack-name rds-rabbitmq-infra || echo "command failed"
          fi

      - name: Run Alembic Revisions
        run: |
          export POSTGRES_HOST=$(aws rds describe-db-instances --db-instance-identifier discord-bot-rds-db --query "DBInstances[0].Endpoint.Address")
          export POSTGRES_HOST=$(echo ${POSTGRES_HOST//\"/})
          export POSTGRES_DB=tempo
          export POSTGRES_USER=adminwhatup
          export POSTGRES_PASSWORD=${{ secrets.RDS_PASSWORD }}
          echo "installing requirements"
          pip install --no-cache-dir -r requirements.txt
          alembic upgrade head


  Build-Infrastructure:
    needs: [Build-Docker-Containers]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create or Update Cloudformation
        run: |
          STACK_NAME="Discord-League-Bot-Stack"
          TEMPLATE_FILE="deployment/infra_cloudformation.yml"
          CAPABILITIES="CAPABILITY_IAM"
          
          aws cloudformation list-stacks > stacks.json
          cat stacks.json
          STACK_EXISTS=$(python scripts/parse_stacks.py "$STACK_NAME")
  
          if [[ "$STACK_EXISTS" == "nostack" ]]; then
            echo "Stack does not exist. Creating stack..."
            aws cloudformation create-stack --stack-name $STACK_NAME --template-body file://$TEMPLATE_FILE --parameters ParameterKey=RDSPASSWORD,ParameterValue="${{ secrets.RDS_PASSWORD }}" --capabilities $CAPABILITIES
            aws cloudformation wait stack-create-complete --stack-name $STACK_NAME
          else
            echo "Stack exists. Updating stack..."
            aws cloudformation update-stack --stack-name $STACK_NAME --template-body file://$TEMPLATE_FILE --parameters ParameterKey=RDSPASSWORD,ParameterValue="${{ secrets.RDS_PASSWORD }}" --capabilities $CAPABILITIES 2>&1 && \
            aws cloudformation wait stack-update-complete --stack-name $STACK_NAME 2>&1 || echo "update stack failed"
            exit 0
          fi

  Deploy-Application:
    runs-on: ubuntu-latest
    needs: [Build-Rds-And-RabbitMq-Infrastructure, Build-Infrastructure]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Show me whats here
        run: ls -l

      - name: Set Parameter Variables
        run: |
          aws ssm put-parameter --name /MyApp/DISCORD_GUILD_ID --value "${{ vars.DISCORD_GUILD_ID }}" --type SecureString
          aws ssm put-parameter --name /MyApp/DISCORD_APPLICATION_ID --value "${{ vars.DISCORD_APPLICATION_ID }}" --type SecureString
          aws ssm put-parameter --name /MyApp/DISCORD_BOT_TOKEN --value "${{ secrets.DISCORD_BOT_TOKEN }}" --type SecureString
          aws ssm put-parameter --name /MyApp/DISCORD_BOT_PUBLIC_KEY --value "${{ vars.DISCORD_BOT_PUBLIC_KEY }}" --type SecureString

      - name: Zip source files
        run: zip -r discord-bot.zip .

      - name: Upload to S3
        run: aws s3 cp discord-bot.zip s3://discord-bot-leagues/discord-bot.zip

      - name: Create CodeDeploy deployment
        run: |
          aws deploy create-deployment \
            --application-name Discord-League-Bot-Application \
            --deployment-group-name Discord-League-Bot-EC2-Deployment-Group \
            --s3-location bucket=discord-bot-leagues,bundleType=zip,key=discord-bot.zip
